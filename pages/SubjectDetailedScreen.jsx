import React, { useEffect, useState, useRef } from "react";
import { View, Text, StyleSheet } from "react-native";
import SockJS from "sockjs-client";
import { Client } from "@stomp/stompjs";
import { TimePanel } from "../components/TimePanel";
import { getSessions } from "../api/session";
import { parseJwt } from "../auth/tokenProcess";
import AsyncStorage from "@react-native-async-storage/async-storage";

export const SubjectDetailsScreen = ({ route }) => {
    const BACK_URL = "http://192.168.0.105:8080";
    const WS_URL = `${BACK_URL}/sockjs`;
    const { subject } = route.params;

    const [queueData, setQueueData] = useState({ places: [] });
    const stompClientRef = useRef(null);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    useEffect(() => {
        const fetchData = async () => {
            try {
                const response = await getSessions(subject);
                setQueueData(response);
                console.log("üì• –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Å—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
            }
        };

        fetchData();
    }, [subject.id]);

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ STOMP
    useEffect(() => {
        const socket = new SockJS(WS_URL);
        const client = new Client({
            webSocketFactory: () => socket,
            onConnect: () => {
                console.log("‚úÖ STOMP –ø–æ–¥–∫–ª—é—á–µ–Ω");

                client.subscribe(`/topic/queue/${subject.id}`, (message) => {
                    const response = JSON.parse(message.body);
                    console.log("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);
                    setQueueData(response);
                });
            },
            onDisconnect: () => {
                console.log("üîå STOMP –æ—Ç–∫–ª—é—á–µ–Ω");
            },
            debug: (str) => console.log("üêû", str),
        });

        client.activate();
        stompClientRef.current = client;

        return () => {
            client.deactivate();
        };
    }, [subject.id]);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å
    const sendQueueRequest = async (placeNumber) => {
        const client = stompClientRef.current;

        if (!client?.connected) {
            console.log("‚ö†Ô∏è STOMP –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
            return;
        }

        const token = await AsyncStorage.getItem("token");
        const parsedToken = parseJwt(token);

        const request = {
            sessionId: subject.id,
            mail: parsedToken.email,
            name: parsedToken.name,
            placeNumber,
        };

        client.publish({
            destination: `/app/queue/${subject.id}`,
            body: JSON.stringify(request),
        });

        console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å:", request);
    };

    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∞–π–º-—Å–ª–æ—Ç–æ–≤
    const timeSlots = Array.from({ length: 9 }, (_, index) => {
        const [startHour, startMinute] = subject.startTime.split(":").map(Number);
        const [endHour, endMinute] = subject.endTime.split(":").map(Number);

        const start = new Date(0, 0, 1, startHour, startMinute);
        const end = new Date(0, 0, 1, endHour, endMinute);
        const interval = (end - start) / 9;

        const slotStart = new Date(start.getTime() + index * interval);
        const slotEnd = new Date(slotStart.getTime() + interval);

        return {
            startTime: slotStart.toTimeString().slice(0, 5),
            endTime: slotEnd.toTimeString().slice(0, 5),
            placeNumber: index + 1,
        };
    });

    return (
        <View style={styles.container}>
            <Text style={styles.title}>{subject.subjectName}</Text>
            <Text style={styles.time}>{subject.startTime} - {subject.endTime}</Text>
            <Text style={styles.info}>–ì—Ä—É–ø–ø–∞: {subject.group}</Text>
            <View style={styles.timePanels}>
                {timeSlots.map((slot) => (
                    <TimePanel
                        key={slot.placeNumber}
                        startTime={slot.startTime}
                        endTime={slot.endTime}
                        isAvailable={queueData.places.includes(slot.placeNumber)}
                        occupiedBy={queueData.placeStudents?.[slot.placeNumber]}
                        onPress={() => sendQueueRequest(slot.placeNumber)}
                    />

                ))}
            </View>
        </View>
    );
};

const styles = StyleSheet.create({
    container: { flex: 1, backgroundColor: "#17161b", padding: 20 },
    title: { fontSize: 24, fontWeight: "bold", color: "white", marginBottom: 10 },
    time: { fontSize: 18, color: "#f9a825", marginBottom: 5 },
    info: { fontSize: 16, color: "#bbb" },
    timePanels: { marginTop: 20 },
});
